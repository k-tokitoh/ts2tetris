{"mappings":"icAWAA,OAAOC,OAAS,WAAA,OAXH,WACX,IACMC,EADSC,SAASC,eAAe,UACpBC,WAAW,MAC9B,GAAKH,EAAL,CAIA,IAAMI,EAAQ,IAAIC,EAAML,GACxBM,YAAYF,EAAMG,KAAM,UAJtBC,QAAQC,MAAM,0CAOIC,QAGhBC,EACJ,SAAAA,EAAYC,EAAWC,GAAWC,EAAAC,KAAAJ,GAChCI,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,GAKPR,aACJ,SAAAA,EAA6BW,GAAgC,IAAAC,EAAAF,KAAAD,EAAAC,KAAAV,GAAAa,EAAAH,KAAA,UAMD,CAC1DI,UAAW,IAAIC,EACfC,OAAQ,IAAIV,EAAM,EAAG,KARsCO,EAAAH,KAAA,QAiBtD,WACLP,QAAQc,IAAIL,EAAKM,QACjBN,EAAKO,OACLP,EAAKQ,QAAQN,UAAUO,SAASC,SAAQ,SAACC,EAAKf,GAAN,OACtCe,EAAID,SAAQ,SAACE,EAAMjB,GACbiB,IACFZ,EAAKM,OAAON,EAAKQ,QAAQJ,OAAOR,EAAIA,GAAGI,EAAKQ,QAAQJ,OAAOT,EAAIA,IAC7D,SAGRK,EAAKQ,QAAQJ,OAAOR,GAAK,EACzBI,EAAKQ,QAAQN,UAAUO,SAASC,SAAQ,SAACC,EAAKf,GAAN,OACtCe,EAAID,SAAQ,SAACE,EAAMjB,GACbiB,IACFZ,EAAKM,OAAON,EAAKQ,QAAQJ,OAAOR,EAAIA,GAAGI,EAAKQ,QAAQJ,OAAOT,EAAIA,IAC7D,YAhCmDG,KAAhCC,KAAAA,EAC3BD,KAAKQ,OAAS,IAAIO,MAAM,IAAIC,KAAK,MAAMC,KAAI,SAACC,GAAD,OAAOH,MAAM,IAAIC,MAAK,gDAUnD,IAAAG,EAAAnB,KACdA,KAAKQ,OAAOS,KAAI,SAACJ,EAAKO,GAAN,OACdP,EAAII,KAAI,SAACI,EAAMC,GAAP,OAAsBH,EAAKX,OAAOY,GAAWE,IAAa,uCAyBvD,IAAAC,EAAAvB,KACbA,KAAKQ,OAAOS,KAAI,SAACJ,EAAKf,GAAN,OACde,EAAII,KAAI,SAACH,EAAMjB,GACbJ,QAAQc,IAAI,QACZgB,EAAKtB,KAAKuB,UAAYV,EAAO,gBAAkB,sBAC/CS,EAAKtB,KAAKwB,SAAa,GAAJ5B,EAAS,EAAO,GAAJC,EAAS,EAAG,GAAI,mBAiBjDO,aACJ,SAAAA,IAAcN,EAAAC,KAAAK,GAAAF,EAAAH,KAAA,YAIoB,CAChC,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,MA1BZA,KAAK0B,UAAY1B,KAAK2B,UAAU,8CAiChC,OAAO3B,KAAK0B","sources":["./src/ts/index.ts"],"sourcesContent":["const main = () => {\n  const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) {\n    console.error(\"could not get CanvasRenderingContext2D\");\n    return;\n  }\n  const board = new Board(ctx);\n  setInterval(board.tick, 1000);\n};\n\nwindow.onload = () => main();\n\ntype Cells = boolean[][];\nclass Coord {\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n  x: number;\n  y: number;\n}\nclass Board {\n  constructor(private readonly _ctx: CanvasRenderingContext2D) {\n    this._cells = new Array(20).fill(null).map((_) => Array(10).fill(false));\n  }\n\n  private _cells: Cells;\n  // eachって定義しときたいな\n  private current: { tetromino: LTetromino; offset: Coord } = {\n    tetromino: new LTetromino(),\n    offset: new Coord(3, 0),\n  };\n\n  private clear() {\n    this._cells.map((row, row_index) =>\n      row.map((_col, col_index) => (this._cells[row_index][col_index] = false))\n    );\n  }\n\n  tick = () => {\n    console.log(this._cells);\n    this.draw();\n    this.current.tetromino.position.forEach((row, y) =>\n      row.forEach((cell, x) => {\n        if (cell)\n          this._cells[this.current.offset.y + y][this.current.offset.x + x] =\n            false;\n      })\n    );\n    this.current.offset.y += 1;\n    this.current.tetromino.position.forEach((row, y) =>\n      row.forEach((cell, x) => {\n        if (cell) {\n          this._cells[this.current.offset.y + y][this.current.offset.x + x] =\n            true;\n        }\n      })\n    );\n  };\n\n  private draw() {\n    this._cells.map((row, y) =>\n      row.map((cell, x) => {\n        console.log(\"draw\");\n        this._ctx.fillStyle = cell ? \"rgba(0, 0, 0)\" : \"rgba(224, 224, 224)\";\n        this._ctx.fillRect(x * 40 + 7, y * 40 + 7, 26, 26);\n      })\n    );\n  }\n}\n\ntype Position = (0 | 1)[][];\n\n// abstract class Tetromino {\n//   // protected positions: any;\n//   // fall(cells: Cells) {} // cellsをかえす\n//   get position() {\n//     return 1\n//   }\n// }\n\n// class LTetromino implements Tetromino {\nclass LTetromino {\n  constructor() {\n    this._position = this.positions[0];\n  }\n\n  protected positions: Position[] = [\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ];\n\n  private _position: Position;\n\n  get position() {\n    return this._position;\n  }\n}\n"],"names":["window","onload","ctx","document","getElementById","getContext","board","Board","setInterval","tick","console","error","main","Coord","x","y","$a4dc1effbbb6df2e938c8731426c16b$var$_classCallCheck","this","_ctx","_this","$a4dc1effbbb6df2e938c8731426c16b$var$_defineProperty","tetromino","LTetromino","offset","log","_cells","draw","current","position","forEach","row","cell","Array","fill","map","_","_this2","row_index","_col","col_index","_this3","fillStyle","fillRect","_position","positions"],"version":3,"file":"ts.0a68c8d2.js.map"}